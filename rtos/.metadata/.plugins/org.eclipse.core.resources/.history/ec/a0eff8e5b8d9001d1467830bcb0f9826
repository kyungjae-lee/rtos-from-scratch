#include <stdint.h>

#define NUM_TASKS			3
#define STACK_SIZE			200
#define PROC_CLK_FREQ		16000000
#define RR_TIME_QUANTUM		10			/* in milliseconds */

/* SysTick Control and Status Register */
#define SYST_CSR			(*(uint32_t volatile *)0xE000E010U)
#define ENABLE				(1U << 0)	/* Enable the counter */
#define TICKINT				(1U << 1)	/* Enable SysTick esception request */
#define CLKSOURCE			(1U << 2)	/* Clock source = processor clock */
#define COUNTFLAG			(1U << 16)	/* Return 1 if timer counted to 0 since last time this was read */

/* SysTick Reload Value Register */
#define SYST_RVR			(*(uint32_t volatile *)0xE000E014U)

/* SysTick Current Value Register */
#define SYST_CVR			(*(uint32_t volatile *)0xE000E018U)

/* Interrupt Control and State Register */
#define ICSR				(*(uint32_t volatile *)0xE000ED04U)
#define PENDSTSET			(1U << 26)	/* SysTick exception set-pending bit */

void start_scheduler(void);

uint32_t ms_prescaler;

/* Task Control Block (TCB) */
typedef struct TCB
{
	uint32_t *p_stack;	/* Stack pointer */
	struct TCB *p_next;	/* Pointer to next TCB */
} TCB_Type;

/* Array of TCBs */
TCB_Type tcbs[NUM_TASKS];

/* Pointer to current TCB */
TCB_Type *p_curr;

/* Stack space for threads (Each thread will be given stack of size 200, i.e., 200 * 4 bytes) */
uint32_t stacks[NUM_TASKS][STACK_SIZE];

/* Initialize task's stack */
void stack_init(uint32_t tid)
{
	/*
	 * ARM Cortex-M processor's stack model - Full Descending (FD)
	 * Stack frame: r0-r3, r12, lr, pc, xpsr (8 byte data)
	 */

	/* Initialize xPSR - Set bit[24] (T-bit of EPSR) to operate in Thumb mode */
	stacks[tid][STACK_SIZE - 1] |= (1U << 24);

	/* Initialize SP  */
	tcbs[tid].p_stack = &stacks[tid][STACK_SIZE - 16]; /* Top of stack assuming all 16 processor core register has been pushed */

	/*
	 * Initialize the rest of the stack content with a dummy value.
	 * This is optional and for debugging purpose only.
	 */
	stacks[tid][STACK_SIZE - 3] 	= 0xAAAAAAAA;	/* r14 (LR) */
	stacks[tid][STACK_SIZE - 4] 	= 0xAAAAAAAA;	/* r12 */
	stacks[tid][STACK_SIZE - 5] 	= 0xAAAAAAAA;	/* r3  */
	stacks[tid][STACK_SIZE - 6] 	= 0xAAAAAAAA;	/* r2  */
	stacks[tid][STACK_SIZE - 7] 	= 0xAAAAAAAA;	/* r1  */
	stacks[tid][STACK_SIZE - 8] 	= 0xAAAAAAAA;	/* r0  */

	stacks[tid][STACK_SIZE - 9] 	= 0xAAAAAAAA;	/* r11 */
	stacks[tid][STACK_SIZE - 10] 	= 0xAAAAAAAA;	/* r10 */
	stacks[tid][STACK_SIZE - 11] 	= 0xAAAAAAAA;	/* r9  */
	stacks[tid][STACK_SIZE - 12] 	= 0xAAAAAAAA;	/* r8  */
	stacks[tid][STACK_SIZE - 13] 	= 0xAAAAAAAA;	/* r7  */
	stacks[tid][STACK_SIZE - 14] 	= 0xAAAAAAAA;	/* r6  */
	stacks[tid][STACK_SIZE - 15] 	= 0xAAAAAAAA;	/* r5  */
	stacks[tid][STACK_SIZE - 16] 	= 0xAAAAAAAA;	/* r4  */
}

uint8_t create_tasks(void (*task0)(void), void (*task1)(void), void (*task2)(void))
{
	/* Disable global interrupts */
	// __disable_irq();

	/*
	 * Initialize task0
	 */

	/* Initialize next pointer */
	tcbs[0].p_next = &tcbs[1];

	/* Initialize PC */
	stacks[0][STACK_SIZE - 2] = (uint32_t)task0;

	/* Initialize stack */
	stack_init(0);


	/*
	 * Initialize task1
	 */

	/* Initialize next pointer */
	tcbs[1].p_next = &tcbs[2];

	/* Initialize PC */
	stacks[0][STACK_SIZE - 2] = (uint32_t)task0;

	/* Initialize stack */
	stack_init(0);


	/*
	 * Initialize task2
	 */

	/* Initialize next pointer */
	tcbs[2].p_next = &tcbs[0];

	/* Initialize PC */
	stacks[0][STACK_SIZE - 2] = (uint32_t)task0;

	/* Initialize stack */
	stack_init(0);


	/* Enable global interrupts */
	// __enable_irq();

	return 1;
}

void kernel_init(void)
{
	/* Reset SysTick Control and Status Register */
	SYST_CSR = 0x0;		/* Force reset to 0 since it resets to either 0x0 or 0x4 */

	/* Clear SysTick Current Value Register */
	SYST_CVR = 0x0;

	/* Load Round-Robin time quantum */
	SYST_RVR = (RR_TIME_QUANTUM * (PROC_CLK_FREQ / 1000)) - 1;

	/* Set SysTick to low priority */
	NVIC_SetPriority(SysTick_IRQn, 15);

	/* Enable counter, enable SysTick interrupt, select internal clock */
	SYST_CSR |= (ENABLE | TICKINT | CLKSOURCE);

	/* Start scheduler */
	start_scheduler();


}

void start_kernel(uint32_t )

void start_scheduler(void)
{
	/* Start scheduling with task0 */
	p_curr = (uint32_t *)&tcbs[0];
}



