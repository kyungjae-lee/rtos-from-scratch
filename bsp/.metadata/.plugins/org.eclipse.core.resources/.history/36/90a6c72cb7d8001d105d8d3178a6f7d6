#include <stdint.h>
#include "bsp_usart.h"

#define RCC_BASE		0x40023800U
#define GPIOA_BASE		0x40020000U
#define USART2_BASE		0x40004400U

#define GPIOAEN			(1U << 0)	/* IO port A clock enable */
#define USART2EN		(1U << 17)

#define SYS_FREQ		16000000	// MCU data sheet "Clocks and Startup"
#define APB1_CLK		SYS_FREQ
#define USART_BAUDRATE	115200		// Desired USART baudrate (standard value)

#define RCC_AHB1ENR			(*(uint32_t volatile *)(RCC_BASE + 0x30U))
#define RCC_APB1ENR			(*(uint32_t volatile *)(RCC_BASE + 0x40U))

#define GPIOA_MODER			(*(uint32_t volatile *)(GPIOA_BASE + 0x00U))
#define GPIOA_IDR			(*(uint32_t volatile *)(GPIOA_BASE + 0x10U))
#define GPIOA_AFR			(*(uint32_t volatile *)(GPIOA_BASE + 0x20U))
#define GPIOD_MODER			(*(uint32_t volatile *)(GPIOD_BASE + 0x00U))
#define GPIOD_ODR			(*(uint32_t volatile *)(GPIOD_BASE + 0x14U))


#define USART2			(*(uint32_t volatile *)USART2_BASE)
#define USART2_SR		(*(uint32_t volatile *)(USART2_BASE + 0x00U))
#define USART2_DR		(*(uint32_t volatile *)(USART2_BASE + 0x04U))
#define USART2_BRR		(*(uint32_t volatile *)(USART2_BASE + 0x08U))
#define USART2_CR1		(*(uint32_t volatile *)(USART2_BASE + 0x0CU))

#define TE				(1U << 3)	// USART Control Register transmitter enable
#define UE				(1U << 13)	// USART Control Register USART enable
#define TXE				(1U << 7)	// USART Status Register Transmit data reg empty

static uint16_t compute_usart_bd(uint32_t periph_clk, uint32_t baudrate);
static void usart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void usart_write(int ch);


/* Allows to use 'printf()'. */
int __io_putchar(int ch)
{
	usart_write(ch);
	return ch;
}

void usart_tx_init(void)
{
	/* Enable clock access to GPIOA. */
	RCC_AHB1ENR |= GPIOAEN;

	/* Set PA2 mode to alternate function mode. */
	GPIOA_MODER &= ~(1U << 4);
	GPIOA_MODER |= (1U << 5);

	/* Set alternate function type to AF7 (USART2_TX) */
	/*
	GPIOA_AFR[0] |= (1U << 8);	// AFR[0]: Low, AFR[1]: High
	GPIOAAFR[0] |= (1U << 9);
	GPIOA->AFR[0] |= (1U << 10);
	GPIOA->AFR[0] &= ~(1U << 11);
	*/


	/* Enable clock access to USART2. */
	RCC_APB1ENR |= USART2EN;

	/* Configure baudrate (the rate at which communication will take place). */
	usart_set_baudrate(APB1_CLK, USART_BAUDRATE);

	/* Configure transfer direction. */
	USART2_CR1 |= TE;	// Enable transmitter

	/* Enable USART module. */
	USART2_CR1 |= UE;	// Enable USART
}

static void usart_write(int ch)
{
	/* Make sure the transmit data register is empty. */
	while (!(USART2_SR & TXE)) {}

	/* Write to transmit data register */
	USART2_DR = (ch & 0xFF);
}

/* Sets the USART baudrate */
static void usart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
	USART2_BRR = compute_usart_bd(periph_clk, baudrate);
}

/* Computes the USART baudrate */
static uint16_t compute_usart_bd(uint32_t periph_clk, uint32_t baudrate)
{
	return (periph_clk + (baudrate / 2U)) / baudrate;
}
