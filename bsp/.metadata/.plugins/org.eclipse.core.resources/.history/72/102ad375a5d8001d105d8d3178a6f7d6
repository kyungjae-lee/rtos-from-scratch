#include <stdint.h>
#include <stm32f407xx_bsp.h>


/* User LEDs: LD3(orange)-PD13, LD4(green)-PD12, LD5(red)-PD14, LD6(blue)-PD15 */
#define LED_GREEN			(1U << 12)
#define LED_ORANGE			(1U << 13)
#define	LED_RED				(1U << 14)
#define LED_BLUE			(1U << 15)

#define LED_GREEN_MODE_OUTPUT		(1U << 24)
#define LED_ORANGE_MODE_OUTPUT		(1U << 26)
#define LED_RED_MODE_OUTPUT			(1U << 28)
#define LED_BLUE_MODE_OUTPUT		(1U << 30)

#define GPIODEN				(1U << 3)	/* IO port D clock enable */
#define TIM3EN				(1U << 1)	/* Timer 3 clock enable */

#define RCC_BASE			0x40023800U
#define GPIOD_BASE			0x40020C00U
#define TIM3_BASE			0x40000400U

#define RCC_AHB1ENR			(*(uint32_t volatile *)(RCC_BASE + 0x30U))
#define RCC_APB1ENR			(*(uint32_t volatile *)(RCC_BASE + 0x40U))

#define GPIOD_MODER			(*(uint32_t volatile *)(GPIOD_BASE + 0x00U))
#define GPIOD_ODR			(*(uint32_t volatile *)(GPIOD_BASE + 0x14U))

#define TIM3_CR1			(*(uint32_t volatile *)(TIM3_BASE + 0x00U))
#define TIM3_SR				(*(uint32_t volatile *)(TIM3_BASE + 0x10U))
#define TIM3_CNT			(*(uint32_t volatile *)(TIM3_BASE + 0x24U))
#define TIM3_PSC			(*(uint32_t volatile *)(TIM3_BASE + 0x28U))
#define TIM3_ARR			(*(uint32_t volatile *)(TIM3_BASE + 0x2CU))
#define CEN					(1U << 0)

void __disable_irq(void);
void __enable_irq(void);

/*****************************************************************************************
 * LED Driver
 *
 * 1. Identify the GPIO port LED is connected to
 * 2. Identify the bus interface the GPIO peripheral is connected to
 * 3. Enable clock for the GPIO peripheral
 * 4. Identify the GPIO pin number of the LED
 * 5. Configure corresponding pin to output mode
 * 6. Set pin to turn on, clear to turn off the LED
 ****************************************************************************************/

void bsp_led_init(void)
{
	__disable_irq();

	/* Enable clock for GPIOD peripheral */
	RCC_AHB1ENR |= GPIODEN;

	/* Set LED pin mode to output mode */
	/* Clear */
	GPIOD_MODER &= ~(0xFFU << 24);
	/* Set */
	GPIOD_MODER |= (LED_GREEN_MODE_OUTPUT |
					LED_ORANGE_MODE_OUTPUT |
					LED_RED_MODE_OUTPUT |
					LED_BLUE_MODE_OUTPUT);

	__enable_irq();
}

/*
 * Green LED
 */

void bsp_led_green_on(void)
{
	GPIOD_ODR |= LED_GREEN;
}

void bsp_led_green_off(void)
{
	GPIOD_ODR &= ~LED_GREEN;
}

void bsp_led_green_toggle(void)
{
	GPIOD_ODR ^= LED_GREEN;
}

/*
 * Orange LED
 */

void bsp_led_orange_on(void)
{
	GPIOD_ODR |= LED_ORANGE;
}

void bsp_led_orange_off(void)
{
	GPIOD_ODR &= ~LED_ORANGE;
}

void bsp_led_orange_toggle(void)
{
	GPIOD_ODR ^= LED_ORANGE;
}

/*
 * Red LED
 */

void bsp_led_red_on(void)
{
	GPIOD_ODR |= LED_RED;
}

void bsp_led_red_off(void)
{
	GPIOD_ODR &= ~LED_RED;
}

void bsp_led_red_toggle(void)
{
	GPIOD_ODR ^= LED_RED;
}

/*
 * Blue LED
 */

void bsp_led_blue_on(void)
{
	GPIOD_ODR |= LED_BLUE;
}

void bsp_led_blue_off(void)
{
	GPIOD_ODR &= ~LED_BLUE;
}

void bsp_led_blue_toggle(void)
{
	GPIOD_ODR ^= LED_BLUE;
}


/*****************************************************************************************
 * Delay (Spinlock delay)
 ****************************************************************************************/

/*
 * This delay function can be useful before kernel launch where there is no timer
 * available yet.
 */

void bsp_delay_ms(uint32_t delay)
{
	/* Enable clock for TIM3 */
	RCC_APB1ENR |= TIM3EN;

	/*
	 * The counter clock frequency CK_CNT is equal to f_(CK_PSC) / (PSC[15:0] + 1).
	 * PSC contains the value to be loaded inthe active prescalar register at each
	 * update event.
	 */
	TIM3_PSC = 160 - 1; 	/* 16 000 000 (default clk freq) / 160 = 10 0000 */
	TIM3_ARR = 100 - 1;		/* 100 000 / 100 = 1000 */
	TIM3_CNT = 0;			/* Counter value */
	TIM3_CR1 |= CEN; 		/* Counter enable */

	for (int i = 0; i < delay; i++)
	{
		/*
		 * UIF: Update interrupt flag (bit[0])
		 * 0: No update occurred
		 * 1: Update interrupt pending. This bit is set by hardware when the registers
		 * 	  are updated:
		 */
		while (!(TIM3_SR & 1)); 	/* wait for UIF set */
		TIM3_SR &= ~1;
	}
}








/*****************************************************************************************
 * Enable / disable IRQ interrupts
 ****************************************************************************************/

/*
 * Enable IRQ interrupts
 * Enables IRQ interrupts by clearing the I-bit in the CPSR.
 * Can only be executed in Privileged modes.
 */
void __enable_irq(void)
{
  __asm volatile("cpsie i");
}

/*
 * Disable IRQ interrupts
 * Disables IRQ interrupts by clearing the I-bit in the CPSR.
 * Can only be executed in Privileged modes.
 */
void __disable_irq(void)
{
  __asm volatile("cpsid i");
}
