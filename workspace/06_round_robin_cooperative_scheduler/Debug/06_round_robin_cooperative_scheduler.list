
06_round_robin_cooperative_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000750  08000750  00010758  2**0
                  CONTENTS
  4 .ARM          00000000  08000750  08000750  00010758  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010758  2**0
                  CONTENTS
 10 .bss          00001308  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001308  20001308  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ea1  00000000  00000000  00010788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000046f  00000000  00000000  00011629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00011a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e0  00000000  00000000  00011bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191e3  00000000  00000000  00011c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013dd  00000000  00000000  0002ae73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c8e5  00000000  00000000  0002c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b8b35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002f0  00000000  00000000  000b8b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000738 	.word	0x08000738

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000738 	.word	0x08000738

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <kernelStackInit>:

/* Each thread will have stack of size 100, i.e., 400 bytes */
int32_t TCB_STACK[NUM_OF_THREADS][STACK_SIZE];

void kernelStackInit(int i)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	/* ARM Cortex-M processor's stack model is "Full Descending". */
	/* Stack frame: {r0, r1, r2, r3, r12, LR, PC, xPSR} */

	/* Initialize stack pointer. */
	tcbs[i].pStack = &TCB_STACK[i][STACK_SIZE - 16];	/* Top of stack */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800024a:	fb02 f303 	mul.w	r3, r2, r3
 800024e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000252:	4a60      	ldr	r2, [pc, #384]	; (80003d4 <kernelStackInit+0x198>)
 8000254:	441a      	add	r2, r3
 8000256:	4960      	ldr	r1, [pc, #384]	; (80003d8 <kernelStackInit+0x19c>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	/* Initialize PSR (Set bit[21] (T-bit) to operate in Thumb mode). */
	TCB_STACK[i][STACK_SIZE - 1] = (1U << 24);	/* PSR */
 800025e:	4a5d      	ldr	r2, [pc, #372]	; (80003d4 <kernelStackInit+0x198>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000266:	fb01 f303 	mul.w	r3, r1, r3
 800026a:	4413      	add	r3, r2
 800026c:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8000270:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000274:	601a      	str	r2, [r3, #0]
	/* PC will be initialized somewhere else. */

	/* The following is for debugging purpose only. Stack initialization will still work
	 * without this part. */
	/* Initialize the rest of the stack content to easily recognizable data. */
	TCB_STACK[i][STACK_SIZE - 3] = 	0xAAAAAAAA;	/* r14 (LR) */
 8000276:	4a57      	ldr	r2, [pc, #348]	; (80003d4 <kernelStackInit+0x198>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800027e:	fb01 f303 	mul.w	r3, r1, r3
 8000282:	4413      	add	r3, r2
 8000284:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8000288:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800028c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 4] = 	0xAAAAAAAA;	/* r12 */
 800028e:	4a51      	ldr	r2, [pc, #324]	; (80003d4 <kernelStackInit+0x198>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000296:	fb01 f303 	mul.w	r3, r1, r3
 800029a:	4413      	add	r3, r2
 800029c:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 80002a0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80002a4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 5] = 	0xAAAAAAAA;	/* r3 */
 80002a6:	4a4b      	ldr	r2, [pc, #300]	; (80003d4 <kernelStackInit+0x198>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80002ae:	fb01 f303 	mul.w	r3, r1, r3
 80002b2:	4413      	add	r3, r2
 80002b4:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80002b8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80002bc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 6] = 	0xAAAAAAAA;	/* r2 */
 80002be:	4a45      	ldr	r2, [pc, #276]	; (80003d4 <kernelStackInit+0x198>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80002c6:	fb01 f303 	mul.w	r3, r1, r3
 80002ca:	4413      	add	r3, r2
 80002cc:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 80002d0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80002d4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 7] = 	0xAAAAAAAA;	/* r1 */
 80002d6:	4a3f      	ldr	r2, [pc, #252]	; (80003d4 <kernelStackInit+0x198>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80002de:	fb01 f303 	mul.w	r3, r1, r3
 80002e2:	4413      	add	r3, r2
 80002e4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80002e8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80002ec:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 8] = 	0xAAAAAAAA;	/* r0 */
 80002ee:	4a39      	ldr	r2, [pc, #228]	; (80003d4 <kernelStackInit+0x198>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80002f6:	fb01 f303 	mul.w	r3, r1, r3
 80002fa:	4413      	add	r3, r2
 80002fc:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000300:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000304:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACK_SIZE - 9] = 	0xAAAAAAAA;	/* r11 */
 8000306:	4a33      	ldr	r2, [pc, #204]	; (80003d4 <kernelStackInit+0x198>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800030e:	fb01 f303 	mul.w	r3, r1, r3
 8000312:	4413      	add	r3, r2
 8000314:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8000318:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800031c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 10] =	0xAAAAAAAA;	/* r10 */
 800031e:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <kernelStackInit+0x198>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000326:	fb01 f303 	mul.w	r3, r1, r3
 800032a:	4413      	add	r3, r2
 800032c:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8000330:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000334:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 11] =	0xAAAAAAAA;	/* r9 */
 8000336:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <kernelStackInit+0x198>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800033e:	fb01 f303 	mul.w	r3, r1, r3
 8000342:	4413      	add	r3, r2
 8000344:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8000348:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800034c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 12] =	0xAAAAAAAA;	/* r8 */
 800034e:	4a21      	ldr	r2, [pc, #132]	; (80003d4 <kernelStackInit+0x198>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000356:	fb01 f303 	mul.w	r3, r1, r3
 800035a:	4413      	add	r3, r2
 800035c:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000360:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000364:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 13] =	0xAAAAAAAA;	/* r7 */
 8000366:	4a1b      	ldr	r2, [pc, #108]	; (80003d4 <kernelStackInit+0x198>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800036e:	fb01 f303 	mul.w	r3, r1, r3
 8000372:	4413      	add	r3, r2
 8000374:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8000378:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800037c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 14] =	0xAAAAAAAA;	/* r6 */
 800037e:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <kernelStackInit+0x198>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000386:	fb01 f303 	mul.w	r3, r1, r3
 800038a:	4413      	add	r3, r2
 800038c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8000390:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000394:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 15] =	0xAAAAAAAA;	/* r5 */
 8000396:	4a0f      	ldr	r2, [pc, #60]	; (80003d4 <kernelStackInit+0x198>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800039e:	fb01 f303 	mul.w	r3, r1, r3
 80003a2:	4413      	add	r3, r2
 80003a4:	f203 6304 	addw	r3, r3, #1540	; 0x604
 80003a8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003ac:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACK_SIZE - 16] =	0xAAAAAAAA;	/* r4 */
 80003ae:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <kernelStackInit+0x198>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80003b6:	fb01 f303 	mul.w	r3, r1, r3
 80003ba:	4413      	add	r3, r2
 80003bc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80003c0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	2000003c 	.word	0x2000003c
 80003d8:	20000020 	.word	0x20000020

080003dc <kernelCreateThreads>:

uint8_t kernelCreateThreads(void (*task0)(void), void (*task1)(void), void (*task2)(void))
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
	/* Disable global interrupts. */
	__disable_irq();

	/* Initialize next pointers of each TCB. */
	tcbs[0].pNext = &tcbs[1];
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <kernelCreateThreads+0x64>)
 80003ee:	4a15      	ldr	r2, [pc, #84]	; (8000444 <kernelCreateThreads+0x68>)
 80003f0:	605a      	str	r2, [r3, #4]
	tcbs[1].pNext = &tcbs[2];
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <kernelCreateThreads+0x64>)
 80003f4:	4a14      	ldr	r2, [pc, #80]	; (8000448 <kernelCreateThreads+0x6c>)
 80003f6:	60da      	str	r2, [r3, #12]
	tcbs[2].pNext = &tcbs[0];
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <kernelCreateThreads+0x64>)
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <kernelCreateThreads+0x64>)
 80003fc:	615a      	str	r2, [r3, #20]

	/* Initialize stack for thread0. */
	kernelStackInit(0);
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff1c 	bl	800023c <kernelStackInit>
	/* Initialize PC */
	TCB_STACK[0][STACK_SIZE - 2] = (uint32_t)task0;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4a11      	ldr	r2, [pc, #68]	; (800044c <kernelCreateThreads+0x70>)
 8000408:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638

	/* Initialize stack for thread0. */
	kernelStackInit(1);
 800040c:	2001      	movs	r0, #1
 800040e:	f7ff ff15 	bl	800023c <kernelStackInit>
	/* Initialize PC */
	TCB_STACK[1][STACK_SIZE - 2] = (uint32_t)task1;
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <kernelCreateThreads+0x70>)
 8000416:	f8c2 3c78 	str.w	r3, [r2, #3192]	; 0xc78

	/* Initialize stack for thread0. */
	kernelStackInit(2);
 800041a:	2002      	movs	r0, #2
 800041c:	f7ff ff0e 	bl	800023c <kernelStackInit>
	/* Initialize PC */
	TCB_STACK[2][STACK_SIZE - 2] = (uint32_t)task2;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <kernelCreateThreads+0x70>)
 8000424:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000428:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8

	/* Start scheduling with thread0. */
	pCurr = &tcbs[0];
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <kernelCreateThreads+0x74>)
 800042e:	4a04      	ldr	r2, [pc, #16]	; (8000440 <kernelCreateThreads+0x64>)
 8000430:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000432:	b662      	cpsie	i
}
 8000434:	bf00      	nop

	/* Enable global interrupts. */
	__enable_irq();

	return 1;
 8000436:	2301      	movs	r3, #1
}
 8000438:	4618      	mov	r0, r3
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000020 	.word	0x20000020
 8000444:	20000028 	.word	0x20000028
 8000448:	20000030 	.word	0x20000030
 800044c:	2000003c 	.word	0x2000003c
 8000450:	20000038 	.word	0x20000038

08000454 <kernelInit>:

void kernelInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ / 1000);	/* Seconds to milliseconds */
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <kernelInit+0x18>)
 800045a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800045e:	601a      	str	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	2000001c 	.word	0x2000001c

08000470 <startKernel>:

void startKernel(uint32_t quanta)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	/* Reset SysTick. */
	SysTick->CTRL = SYSTICK_RST;
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <startKernel+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]

	/* Clear SysTick Current Value Register. */
	SysTick->VAL = 0;
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <startKernel+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]

	/* Load quanta. */
	SysTick->LOAD = (quanta * MILLIS_PRESCALER) - 1;
 8000484:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <startKernel+0x50>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	fb02 f303 	mul.w	r3, r2, r3
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <startKernel+0x4c>)
 8000490:	3b01      	subs	r3, #1
 8000492:	6053      	str	r3, [r2, #4]

	/* Set SysTick to low priority. */
	NVIC_SetPriority(SysTick_IRQn, 15);
 8000494:	210f      	movs	r1, #15
 8000496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800049a:	f7ff fea5 	bl	80001e8 <__NVIC_SetPriority>

	/* Enable SysTick interrupt, select internal clock. */
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <startKernel+0x4c>)
 80004a0:	2205      	movs	r2, #5
 80004a2:	601a      	str	r2, [r3, #0]

	/* Enable SysTick interrupt. */
	SysTick->CTRL |= CTRL_TICKINT;
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <startKernel+0x4c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <startKernel+0x4c>)
 80004aa:	f043 0302 	orr.w	r3, r3, #2
 80004ae:	6013      	str	r3, [r2, #0]

	/* Launch scheduler. */
	startScheduler();
 80004b0:	f000 f81a 	bl	80004e8 <startScheduler>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	e000e010 	.word	0xe000e010
 80004c0:	2000001c 	.word	0x2000001c

080004c4 <SysTick_Handler>:
	 /*
	  * Switch-out current task.
	  */

	 /* Disable global interrupts. */
	 __asm("cpsid i");
 80004c4:	b672      	cpsid	i

	 /* Push r4-r11 on to stack since they are not part of those registers (stack frame)
	  * that get pushed onto stack automatically by the processor as an exception entry
	  * sequence. */
	 __asm("push {r4-r11}");
 80004c6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	 /* Load r0 with the address of the pCurr (&pCurr). */
	 __asm("ldr r0, =pCurr");
 80004ca:	4806      	ldr	r0, [pc, #24]	; (80004e4 <SysTick_Handler+0x20>)

	 /* Load r1 with pCurr. */
	 __asm("ldr r1, [r0]");
 80004cc:	6801      	ldr	r1, [r0, #0]

	 /* Store the sp into the current TCB's pStack. This works because pStack is the
	  * first member of a TCB struct. Start address of a TCB is the same as the address
	  * of its pStack. */
	 __asm("str sp, [r1]");
 80004ce:	f8c1 d000 	str.w	sp, [r1]
	 /*
	  * Switch-in next task.
	  */

	 /* Load r1 with pCurr->pNext. [r1] <- [[r1] + 4];  */
	 __asm("ldr r1, [r1, #4]");
 80004d2:	6849      	ldr	r1, [r1, #4]

	 /* Store r1 into the address r0 points to. pCurr = pCurr->next; Advance pCurr. */
	 __asm("str r1, [r0]");
 80004d4:	6001      	str	r1, [r0, #0]

	 /* Load SP with r1 value. Load SP with the SP of the next task to run. */
	 __asm("ldr sp, [r1]");
 80004d6:	f8d1 d000 	ldr.w	sp, [r1]

	 /* Pop (restore) r4-r11 from stack. Rest of the registers will be automatically popped
	  * by the processor as an exception exit sequence. */
	 __asm("pop {r4-r11}");
 80004da:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	 /* Enable global interrupts. */
	 __asm("cpsie i");
 80004de:	b662      	cpsie	i

	 /* Return from the subroutine. */
	 __asm("bx lr");
 80004e0:	4770      	bx	lr

	 /* At the exit of exception, registers r0-r3, r12, lr, pc, psr will be automatically
	  * restored from stack by the processor. */
}
 80004e2:	bf00      	nop
 80004e4:	20000038 	.word	0x20000038

080004e8 <startScheduler>:
/*
 * Launches the very first task by updating the processor's SP to the first task's SP, and
 * restoring the first task's context.
 */
void startScheduler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	/* Disable global interrupts. */
	// __asm("cpsid i");	// Do we need synchronization here?

	/* Load r0 with the address of pCurr. */
	__asm("ldr r0, =pCurr");
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <startScheduler+0x2c>)

	/* Load r2 with pCurr. [r2] <- [[r0]]; */
	__asm("ldr r2, [r0]");
 80004ee:	6802      	ldr	r2, [r0, #0]

	/* Load sp with [r2]. sp = pCurr->pStack. */
	__asm("ldr sp, [r2]");
 80004f0:	f8d2 d000 	ldr.w	sp, [r2]

	/* Pop (restore) r4-r11 from stack. */
	__asm("pop {r4-r11}");
 80004f4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/* Pop (restore) r0-r3 from stack. */
	__asm("pop {r0-r3}");
 80004f8:	bc0f      	pop	{r0, r1, r2, r3}

	/* Pop (restore) r12 from stack. */
	__asm("pop {r12}");
 80004fa:	f85d cb04 	ldr.w	ip, [sp], #4

	/* Skip LR in the stack. */
	__asm("add sp, sp, #4");
 80004fe:	b001      	add	sp, #4

	/* Update processor's LR with the PC value in the stack. */
	__asm("pop {lr}");
 8000500:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Skip PSR in the stack. */
	__asm("add sp, sp, #4");
 8000504:	b001      	add	sp, #4

	/* Enable global interrupts. */
	// __asm("cpsie i");	// why enable when we didn't even disable in the first place?

	 /* Return from the subroutine.*/
	 __asm("bx lr");
 8000506:	4770      	bx	lr

}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	0000      	.short	0x0000
 8000514:	20000038 	.word	0x20000038

08000518 <taskYield>:

void taskYield(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	/* Clear SysTick Current Value Register. */
	SysTick->VAL = 0;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <taskYield+0x20>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]

	/* Trigger SysTick.
	 * Interrupt Control and State Register -> bit[26]: SysTick exception set-pending bit.
	 * Set bit[26] to 1. */
	ICSR |= PEND_SYSTICK;
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <taskYield+0x24>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <taskYield+0x24>)
 8000528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800052c:	6013      	str	r3, [r2, #0]
	/* OR? or assign? Teaching assistant is saying, we are forcing SysTick to generate
	 * exception in order to switch to the next thread so, we are clearing everything
	 * and generate only SysTick exception. */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	e000e010 	.word	0xe000e010
 800053c:	e000ed04 	.word	0xe000ed04

08000540 <task0>:
void motor_stop(void);
void valve_open(void);
void valve_close(void);

void task0(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	while (1)
	{
		task0_profiler++;
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <task0+0x14>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	4a02      	ldr	r2, [pc, #8]	; (8000554 <task0+0x14>)
 800054c:	6013      	str	r3, [r2, #0]
		taskYield();	/* Once it increments its profiler, yield. */
 800054e:	f7ff ffe3 	bl	8000518 <taskYield>
		task0_profiler++;
 8000552:	e7f7      	b.n	8000544 <task0+0x4>
 8000554:	200012fc 	.word	0x200012fc

08000558 <task1>:
	}
}

void task1(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	while (1)
	{
		task1_profiler++;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <task1+0x10>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	4a01      	ldr	r2, [pc, #4]	; (8000568 <task1+0x10>)
 8000564:	6013      	str	r3, [r2, #0]
 8000566:	e7f9      	b.n	800055c <task1+0x4>
 8000568:	20001300 	.word	0x20001300

0800056c <task2>:
	}
}

void task2(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	while (1)
	{
		task2_profiler++;
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <task2+0x10>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a01      	ldr	r2, [pc, #4]	; (800057c <task2+0x10>)
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	e7f9      	b.n	8000570 <task2+0x4>
 800057c:	20001304 	.word	0x20001304

08000580 <main>:
	}
}


int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* Initialize USART */
	usart_tx_init();
 8000584:	f000 f814 	bl	80005b0 <usart_tx_init>

	/* Initialize kernel. */
	kernelInit();
 8000588:	f7ff ff64 	bl	8000454 <kernelInit>

	/* Create tasks. */
	kernelCreateThreads(task0, task1, task2);	/* &task0, &task1, &task2 ? */
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <main+0x24>)
 800058e:	4906      	ldr	r1, [pc, #24]	; (80005a8 <main+0x28>)
 8000590:	4806      	ldr	r0, [pc, #24]	; (80005ac <main+0x2c>)
 8000592:	f7ff ff23 	bl	80003dc <kernelCreateThreads>

	/* Set the Round-Robin time quanta. */
	startKernel(QUANTA);
 8000596:	200a      	movs	r0, #10
 8000598:	f7ff ff6a 	bl	8000470 <startKernel>
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	0800056d 	.word	0x0800056d
 80005a8:	08000559 	.word	0x08000559
 80005ac:	08000541 	.word	0x08000541

080005b0 <usart_tx_init>:
	usart_write(ch);
	return ch;
}

void usart_tx_init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA. */
	RCC->AHB1ENR |= GPIOAEN;
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <usart_tx_init+0x8c>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <usart_tx_init+0x8c>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PA2 mode to alternate function mode. */
	GPIOA->MODER &= ~(1U << 4);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <usart_tx_init+0x90>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <usart_tx_init+0x90>)
 80005c6:	f023 0310 	bic.w	r3, r3, #16
 80005ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <usart_tx_init+0x90>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <usart_tx_init+0x90>)
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7 (USART2_TX) */
	GPIOA->AFR[0] |= (1U << 8);	// AFR[0]: Low, AFR[1]: High
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <usart_tx_init+0x90>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	4a18      	ldr	r2, [pc, #96]	; (8000640 <usart_tx_init+0x90>)
 80005de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <usart_tx_init+0x90>)
 80005e6:	6a1b      	ldr	r3, [r3, #32]
 80005e8:	4a15      	ldr	r2, [pc, #84]	; (8000640 <usart_tx_init+0x90>)
 80005ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <usart_tx_init+0x90>)
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <usart_tx_init+0x90>)
 80005f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <usart_tx_init+0x90>)
 80005fe:	6a1b      	ldr	r3, [r3, #32]
 8000600:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <usart_tx_init+0x90>)
 8000602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000606:	6213      	str	r3, [r2, #32]


	/* Enable clock access to USART2. */
	RCC->APB1ENR |= USART2EN;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <usart_tx_init+0x8c>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <usart_tx_init+0x8c>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40

	/* Configure baudrate (the rate at which communication will take place). */
	usart_set_baudrate(APB1_CLK, USART_BAUDRATE);
 8000614:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <usart_tx_init+0x94>)
 800061a:	f000 f817 	bl	800064c <usart_set_baudrate>

	/* Configure transfer direction. */
	USART2->CR1 |= CR1_TE;	// Enable transmitter
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <usart_tx_init+0x98>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <usart_tx_init+0x98>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	60d3      	str	r3, [r2, #12]

	/* Enable USART module. */
	USART2->CR1 |= CR1_UE;	// Enable USART
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <usart_tx_init+0x98>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <usart_tx_init+0x98>)
 8000630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000634:	60d3      	str	r3, [r2, #12]
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	00f42400 	.word	0x00f42400
 8000648:	40004400 	.word	0x40004400

0800064c <usart_set_baudrate>:
	USART2->DR = (ch & 0xFF);
}

/* Sets the USART baudrate */
static void usart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_usart_bd(periph_clk, baudrate);
 8000656:	6839      	ldr	r1, [r7, #0]
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 f80b 	bl	8000674 <compute_usart_bd>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <usart_set_baudrate+0x24>)
 8000664:	609a      	str	r2, [r3, #8]
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40004400 	.word	0x40004400

08000674 <compute_usart_bd>:

/* Computes the USART baudrate */
static uint16_t compute_usart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	return (periph_clk + (baudrate / 2U)) / baudrate;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	085a      	lsrs	r2, r3, #1
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	441a      	add	r2, r3
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	fbb2 f3f3 	udiv	r3, r2, r3
 800068c:	b29b      	uxth	r3, r3
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f000 f811 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff ff57 	bl	8000580 <main>

080006d2 <LoopForever>:

LoopForever:
    b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006e0:	08000758 	.word	0x08000758
  ldr r2, =_sbss
 80006e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006e8:	20001308 	.word	0x20001308

080006ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC_IRQHandler>
	...

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	4d0d      	ldr	r5, [pc, #52]	; (8000728 <__libc_init_array+0x38>)
 80006f4:	4c0d      	ldr	r4, [pc, #52]	; (800072c <__libc_init_array+0x3c>)
 80006f6:	1b64      	subs	r4, r4, r5
 80006f8:	10a4      	asrs	r4, r4, #2
 80006fa:	2600      	movs	r6, #0
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <__libc_init_array+0x40>)
 8000702:	4c0c      	ldr	r4, [pc, #48]	; (8000734 <__libc_init_array+0x44>)
 8000704:	f000 f818 	bl	8000738 <_init>
 8000708:	1b64      	subs	r4, r4, r5
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	2600      	movs	r6, #0
 800070e:	42a6      	cmp	r6, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f855 3b04 	ldr.w	r3, [r5], #4
 8000718:	4798      	blx	r3
 800071a:	3601      	adds	r6, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000722:	4798      	blx	r3
 8000724:	3601      	adds	r6, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	08000750 	.word	0x08000750
 800072c:	08000750 	.word	0x08000750
 8000730:	08000750 	.word	0x08000750
 8000734:	08000754 	.word	0x08000754

08000738 <_init>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr

08000744 <_fini>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr
